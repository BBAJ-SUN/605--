import plotly
import plotly.graph_objects as go
import plotly.io as pio
import psutil
import plotly.offline
from plotly import subplots

#当天的温度等的变化情况
#多个子图
def today_line(city):
    fig = subplots.make_subplots(rows=2,cols=2,
                                subplot_titles=["温度", 
                                    "相对湿度", 
                                    "降水量", 
                                    "空气质量"], )
    #折线图
    line0 = go.Scatter(x=data_today_CN[data_today_CN["地区"]==city]["时间"],
                       y=data_today_CN[data_today_CN["地区"]==city]["温度"],
                       name="温度",
                       mode = 'lines+markers'
                      )
    line1 = go.Scatter(x=data_today_CN[data_today_CN["地区"]==city]["时间"],
                       y=data_today_CN[data_today_CN["地区"]==city]["相对湿度"],
                       name="相对湿度",
                       mode = 'lines+markers'
                      )
#     line2 = go.Scatter(x=data_today_CN[data_today_CN["地区"]==city]["时间"],
#                        y=data_today_CN[data_today_CN["地区"]==city]["空气质量"],
#                        name="空气质量",
#                        mode = 'lines+markers'
#                       )
#     line3 = go.Scatter(x=data_today_CN[data_today_CN["地区"]==city]["时间"],
#                        y=data_today_CN[data_today_CN["地区"]==city]["降水量"],
#                        name="降水量",
#                        mode = 'lines+markers'
#                       )
    bar0 = go.Bar(x=data_today_CN[data_today_CN["地区"]==city]["时间"],
                  y=data_today_CN[data_today_CN["地区"]==city]["空气质量"],
                  name="空气质量",
                  marker_color='rgb(255, 255, 204)')
    bar1 = go.Bar(x=data_today_CN[data_today_CN["地区"]==city]["时间"],
                  y=data_today_CN[data_today_CN["地区"]==city]["降水量"],
                  name="降水量",
                  marker_color='rgb(102, 204, 255)')
    
    
    fig.append_trace(line0,1,1)
    fig.append_trace(line1,1,2)
    fig.append_trace(bar1,2,1)
    fig.append_trace(bar0,2,2)
    
    fig["layout"]["xaxis"].update({"title": "","tickangle":45})
    fig["layout"]["yaxis"].update({"title": "(℃)"})
    fig["layout"]["xaxis2"].update({"title": "","tickangle":45})
    fig["layout"]["yaxis2"].update({"title": "(%)"})
    fig["layout"]["xaxis3"].update({"title": "","tickangle":45})
    fig["layout"]["yaxis3"].update({"title": "(mm)"})
    fig["layout"]["xaxis4"].update({"title": "","tickangle":45})
    fig["layout"]["yaxis4"].update({"title": ""})
    #fig = go.Figure([line0,line1,line3,bar0])
    fig.update_layout(
        title = city
    )
    #将图像写入html文件中
    plotly.offline.plot(fig,filename='C:/Users/22524/Desktop/当天/'+city+'_1.html')
    
#未来七天的温度变化情况
def seven_future(city):
    data = data_week_CN.copy()
    data["温度"] = data["温度"].apply(lambda x: x[:-1])
    line = go.Scatter(x=data[data["地区"]==city]["时间"],
                       y=data[data["地区"]==city]["温度"],
                       name="温度",
                       mode = 'lines+markers'
                      )
    fig = go.Figure(line)
    fig.update_layout(
        title = "温度变化情况"+"("+city+")",
        xaxis_title = "时间",
        yaxis_title = "温度"
    )
    #将图像写入html文件中
    plotly.offline.plot(fig,filename='C:/Users/22524/Desktop/未来七天/'+city+'_7.html')
    #fig.show()
    
#空气质量对比图
#柱状图，orientation参数设定横向还是纵向,marker_color参数设置图的颜色
data = data_today_CN.groupby("地区")["空气质量"].mean().round(decimals=1).reset_index()
bar0 = go.Bar(x=data["空气质量"],
              y=data["地区"],
              orientation='h',
              marker_color='rgb(255, 255, 204)')
fig = go.Figure([bar0])
#barmode参数用于选定图的显示形式，默认为并列形式
fig.update_layout(title = "空气质量对比",
                  xaxis_title = "空气质量",
                  yaxis_title = "城市"
                  )
plotly.offline.plot(fig,filename='C:/Users/22524/Desktop/'+'全国省会城市空气质量对比.html')
fig.show()

def get_temp(city):
#     data1 = data[data["地区"]==city]
#     ave_temp = []
#     for i in range(2011,2020):
#         ave_temp.append(data1[data1["year"]==i]["平均温度"].values)
#     return ave_temp
# def paint_history(city):
#     #折线图
#     temp_data = get_temp(city)
#     list_mon = []
#     for i in range(1,13):
#         list_mon.append(str(i)+"月")
#     line0 = go.Scatter(x=list_mon,
#                        y=temp_data[0],
#                        name="2011",
#                        mode = 'lines+markers'
#                       )
#     line1 = go.Scatter(x=list_mon,
#                        y=temp_data[1],
#                        name="2012",
#                        mode = 'lines+markers'
#                       )
#     line2 = go.Scatter(x=list_mon,
#                        y=temp_data[2],
#                        name="2013",
#                        mode = 'lines+markers'
#                       )
#     line3 = go.Scatter(x=list_mon,
#                        y=temp_data[3],
#                        name="2014",
#                        mode = 'lines+markers'
#                       )
#     line4 = go.Scatter(x=list_mon,
#                        y=temp_data[4],
#                        name="2015",
#                        mode = 'lines+markers'
#                       )
#     line5 = go.Scatter(x=list_mon,
#                        y=temp_data[5],
#                        name="2016",
#                        mode = 'lines+markers'
#                       )
#     line6 = go.Scatter(x=list_mon,
#                        y=temp_data[6],
#                        name="2017",
#                        mode = 'lines+markers'
#                       )
#     line7 = go.Scatter(x=list_mon,
#                        y=temp_data[7],
#                        name="2018",
#                        mode = 'lines+markers'
#                       )
#     line8 = go.Scatter(x=list_mon,
#                        y=temp_data[8],
#                        name="2019",
#                        mode = 'lines+markers'
#                       )
#     fig = go.Figure([line0,line1,line2,line3,line5,line6,line7,line8])
#     fig.update_layout(
#         title = "历年温度变化情况"+"("+city+")",
#         xaxis_title = "时间",
#         yaxis_title = "数值"
#     )
#     #将图像写入html文件中
#     plotly.offline.plot(fig,filename='C:/Users/22524/Desktop/历史天气变化/'+city+'_history.html')
#     #fig.show()
